# main.py
"""
Sistema de Gera√ß√£o de Testes Unit√°rios com LangChain e Azure ChatGPT

Interface de linha de comando (CLI) principal para interagir com o agente de testes.
"""

import os
import sys
import json
import logging
import argparse
from pathlib import Path
from datetime import datetime
from typing import Optional, List, Dict, Any

# Configura√ß√£o b√°sica de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importa os m√≥dulos do nosso projeto
from src.config import config
from src.llm import SimulatedLLM # Para o banner de simula√ß√£o
from src.analyzer import CodeAnalyzer
from src.agent import TestGeneratorAgent

class TestGeneratorCLI:
    """
    Interface de linha de comando principal para o sistema de gera√ß√£o de testes.
    """
    def __init__(self):
        """
        Inicializa a CLI, o gerenciador de configura√ß√µes e o agente de testes.
        """
        self.config = config # A inst√¢ncia global de configura√ß√£o
        self.agent = TestGeneratorAgent()
        self.analyzer = CodeAnalyzer() # Para an√°lise r√°pida e display
        self.statistics = {
            'total_generations': 0,
            'successful_generations': 0,
            'failed_generations': 0,
            'start_time': datetime.now()
        }
        
        # Cria diret√≥rios necess√°rios
        self._create_necessary_directories()
    
    def _create_necessary_directories(self):
        """Cria diret√≥rios de sa√≠da e logs."""
        Path(self.config.output_directory).mkdir(parents=True, exist_ok=True)
        Path('logs').mkdir(exist_ok=True) # Exemplo: para logs mais detalhados
        logger.info(f"Diret√≥rio de sa√≠da criado/verificado: {self.config.output_directory}")

    def display_banner(self):
        """Exibe o banner de boas-vindas do sistema."""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     SISTEMA DE GERA√á√ÉO DE TESTES UNIT√ÅRIOS                  ‚ïë
‚ïë                          LangChain + Azure ChatGPT                          ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Desenvolvido por: Edson Gomes (Adaptado por Gemini)                        ‚ïë
‚ïë  Bootcamp: DIO + BairesDev Machine Learning                                 ‚ïë
‚ïë  GitHub: @edsongom1                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
        
        if self.config.simulate_llm:
            print("‚ö†Ô∏è  MODO SIMULA√á√ÉO ATIVO")
            print("   Configure as vari√°veis Azure OpenAI no seu .env para usar o modo completo.")
        
        print()
    
    def display_main_menu(self):
        """Exibe o menu principal de op√ß√µes para o usu√°rio."""
        print("OP√á√ïES DISPON√çVEIS:")
        print("‚îÄ" * 50)
        print("1. üìù Gerar testes para c√≥digo Python (interativo)")
        print("2. üìÅ Processar arquivo(s) de c√≥digo")
        print("3. üîç Analisar c√≥digo (sem gerar testes)")
        print("4. üß™ Executar exemplo de demonstra√ß√£o")
        print("5. ‚öôÔ∏è  Configura√ß√µes do sistema")
        print("6. üìä Estat√≠sticas da sess√£o")
        print("7. ‚ùì Ajuda e documenta√ß√£o")
        print("8. üö™ Sair")
        print()
    
    def get_user_choice(self, max_option: int) -> int:
        """
        Obt√©m a escolha do usu√°rio a partir do menu.
        """
        while True:
            try:
                choice = input(f"Escolha uma op√ß√£o (1-{max_option}): ").strip()
                choice_int = int(choice)
                if 1 <= choice_int <= max_option:
                    return choice_int
                else:
                    print(f"‚ùå Por favor, escolha um n√∫mero entre 1 e {max_option}")
            except ValueError:
                print("‚ùå Por favor, digite um n√∫mero v√°lido.")
            except KeyboardInterrupt:
                print("\n\nüëã Programa interrompido pelo usu√°rio.")
                sys.exit(0)
    
    def run(self):
        """Executa o loop principal da interface de linha de comando."""
        self.display_banner()
        
        while True:
            self.display_main_menu()
            choice = self.get_user_choice(8) # 8 op√ß√µes no menu
            
            if choice == 1:
                self.generate_tests_interactive()
            elif choice == 2:
                self.process_files()
            elif choice == 3:
                self.analyze_code_only()
            elif choice == 4:
                self.run_demonstration()
            elif choice == 5:
                self.show_system_configuration()
            elif choice == 6:
                self.show_statistics()
            elif choice == 7:
                self.show_help()
            elif choice == 8:
                self._safe_exit()
                break
    
    def generate_tests_interactive(self):
        """Permite ao usu√°rio colar c√≥digo para gerar testes interativamente."""
        print("\n" + "=" * 60)
        print("üìù GERA√á√ÉO DE TESTES INTERATIVA")
        print("=" * 60)
        
        print("\nCole ou digite seu c√≥digo Python abaixo.")
        print("Para finalizar a entrada, digite 'END' em uma linha separada:")
        print("‚îÄ" * 40)
        
        code_lines = []
        while True:
            try:
                line = input()
                if line.strip().upper() == 'END':
                    break
                code_lines.append(line)
            except KeyboardInterrupt:
                print("\n‚ùå Entrada cancelada pelo usu√°rio.")
                return
        
        source_code = '\n'.join(code_lines).strip()
        
        if not source_code:
            print("‚ùå Nenhum c√≥digo fornecido.")
            return
        
        # An√°lise r√°pida para feedback
        quick_analysis = self.analyzer.analyze_code(source_code)
        if 'error' in quick_analysis:
            print(f"‚ùå Erro de sintaxe no c√≥digo: {quick_analysis['error']}")
            return
        
        print(f"\nüîç C√≥digo analisado: {quick_analysis['statistics']['total_functions']} fun√ß√µes, {quick_analysis['statistics']['total_classes']} classes.")
        
        confirm = input("Continuar com a gera√ß√£o de testes? (S/n): ").strip().lower()
        if confirm in ['n', 'no', 'n√£o']:
            print("‚ùå Gera√ß√£o cancelada.")
            return
        
        print("\nüîÑ Gerando testes...")
        self._process_code_generation(source_code)
    
    def process_files(self):
        """Permite processar um arquivo √∫nico ou um diret√≥rio de arquivos Python."""
        print("\n" + "=" * 60)
        print("üìÅ PROCESSAMENTO DE ARQUIVOS")
        print("=" * 60)
        
        print("\nOp√ß√µes:")
        print("1. Processar arquivo √∫nico")
        print("2. Processar diret√≥rio")
        print("3. Voltar ao menu principal")
        
        choice = self.get_user_choice(3)
        
        if choice == 1:
            self._process_single_file()
        elif choice == 2:
            self._process_directory()
    
    def _process_single_file(self):
        """Processa um √∫nico arquivo Python."""
        file_path_str = input("\nüìÑ Caminho do arquivo Python (.py): ").strip()
        
        if not file_path_str:
            print("‚ùå Caminho n√£o fornecido.")
            return
        
        file_path = Path(file_path_str)
        
        if not file_path.exists():
            print(f"‚ùå Arquivo n√£o encontrado: {file_path_str}")
            return
        
        if not file_path.suffix == '.py':
            print("‚ùå Arquivo deve ter extens√£o .py.")
            return
        
        try:
            source_code = file_path.read_text(encoding='utf-8')
            print(f"‚úÖ Arquivo carregado: {file_path.name}")
            
            self._process_code_generation(source_code, file_path.stem)
            
        except Exception as e:
            print(f"‚ùå Erro ao ler arquivo: {e}")
    
    def _process_directory(self):
        """Processa todos os arquivos Python em um diret√≥rio."""
        dir_path_str = input("\nüìÅ Caminho do diret√≥rio: ").strip()
        
        if not dir_path_str:
            print("‚ùå Caminho n√£o fornecido.")
            return
        
        dir_path = Path(dir_path_str)
        
        if not dir_path.exists() or not dir_path.is_dir():
            print(f"‚ùå Diret√≥rio n√£o encontrado: {dir_path_str}")
            return
        
        py_files = list(dir_path.glob("**/*.py"))
        
        if not py_files:
            print("‚ùå Nenhum arquivo Python encontrado no diret√≥rio.")
            return
        
        print(f"üìÑ Encontrados {len(py_files)} arquivo(s) Python:")
        for i, file in enumerate(py_files[:10], 1):
            print(f"  {i}. {file.relative_to(dir_path)}")
        
        if len(py_files) > 10:
            print(f"  ... e mais {len(py_files) - 10} arquivo(s).")
        
        confirm = input(f"\nProcessar {len(py_files)} arquivo(s)? (S/n): ").strip().lower()
        if confirm in ['n', 'no', 'n√£o']:
            return
        
        for file_path in py_files:
            try:
                source_code = file_path.read_text(encoding='utf-8')
                print(f"\nüîÑ Processando {file_path.name}...")
                self._process_code_generation(source_code, file_path.stem)
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao ler ou processar {file_path.name}: {e}")
    
    def _process_code_generation(self, source_code: str, filename: Optional[str] = None):
        """
        Fun√ß√£o auxiliar para chamar o agente e exibir/salvar os resultados.
        """
        start_time = datetime.now()
        
        try:
            result = self.agent.generate_tests(source_code)
            
            execution_time = (datetime.now() - start_time).total_seconds()
            
            print(f"\n{'‚úÖ' if result['success'] else '‚ùå'} Gera√ß√£o {'conclu√≠da' if result['success'] else 'falhou'}")
            print(f"‚è±Ô∏è  Tempo de execu√ß√£o: {execution_time:.2f}s")
            
            if result['success']:
                stats = result['analysis'].get('statistics', {})
                
                print(f"üìä Estat√≠sticas do C√≥digo Analisado:")
                print(f"   Fun√ß√µes: {stats.get('total_functions', 0)}")
                print(f"   Classes: {stats.get('total_classes', 0)}")
                print(f"   Complexidade: {stats.get('complexity', 0)}")
                
                self._display_generated_tests(result['test_code'])
                self._offer_save_tests(result['test_code'], filename)
                
                self.statistics['successful_generations'] += 1
            else:
                print(f"üí• Erro: {result['error']}")
                self.statistics['failed_generations'] += 1
                
            self.statistics['total_generations'] += 1
            
        except Exception as e:
            logger.error(f"Erro inesperado no processamento de gera√ß√£o: {e}", exc_info=True)
            print(f"‚ùå Erro inesperado: {e}")
            self.statistics['failed_generations'] += 1
            self.statistics['total_generations'] += 1
    
    def analyze_code_only(self):
        """Permite ao usu√°rio colar c√≥digo para an√°lise sem gera√ß√£o de testes."""
        print("\n" + "=" * 60)
        print("üîç AN√ÅLISE DE C√ìDIGO")
        print("=" * 60)
        
        print("\nCole seu c√≥digo Python abaixo (digite 'END' para finalizar):")
        
        code_lines = []
        while True:
            try:
                line = input()
                if line.strip().upper() == 'END':
                    break
                code_lines.append(line)
            except KeyboardInterrupt:
                print("\n‚ùå An√°lise cancelada.")
                return
        
        source_code = '\n'.join(code_lines).strip()
        
        if not source_code:
            print("‚ùå Nenhum c√≥digo fornecido.")
            return
        
        try:
            analysis = self.analyzer.analyze_code(source_code)
            
            if 'error' in analysis:
                print(f"‚ùå Erro na an√°lise: {analysis['error']}")
                return
            
            self._display_code_analysis(analysis)
            
        except Exception as e:
            logger.error(f"Erro inesperado na an√°lise: {e}", exc_info=True)
            print(f"‚ùå Erro inesperado na an√°lise: {e}")
    
    def run_demonstration(self):
        """Executa um exemplo de demonstra√ß√£o com um c√≥digo pr√©-definido."""
        print("\n" + "=" * 60)
        print("üß™ DEMONSTRA√á√ÉO DO SISTEMA")
        print("=" * 60)
        
        demo_code = '''def calcular_area_retangulo(largura, altura):
    """Calcula a √°rea de um ret√¢ngulo."""
    if largura <= 0 or altura <= 0:
        raise ValueError("Largura e altura devem ser positivas")
    return largura * altura

def calcular_perimetro_retangulo(largura, altura):
    """Calcula o per√≠metro de um ret√¢ngulo."""
    if largura <= 0 or altura <= 0:
        raise ValueError("Largura e altura devem ser positivas")
    return 2 * (largura + altura)

class ContaBancaria:
    def __init__(self, saldo_inicial=0):
        if saldo_inicial < 0:
            raise ValueError("Saldo inicial n√£o pode ser negativo")
        self._saldo = saldo_inicial
    
    def depositar(self, valor):
        if valor <= 0:
            raise ValueError("Valor deve ser positivo")
        self._saldo += valor
        return self._saldo
    
    def sacar(self, valor):
        if valor <= 0:
            raise ValueError("Valor deve ser positivo")
        if valor > self._saldo:
            raise ValueError("Saldo insuficiente")
        self._saldo -= valor
        return self._saldo
    
    @property
    def saldo(self):
        return self._saldo'''
        
        print("C√≥digo de demonstra√ß√£o:")
        print("‚îÄ" * 30)
        print(demo_code[:300] + "..." if len(demo_code) > 300 else demo_code)
        print("‚îÄ" * 30)
        
        confirm = input("\nProsseguir com a demonstra√ß√£o? (S/n): ").strip().lower()
        if confirm in ['n', 'no', 'n√£o']:
            return
        
        print("\nüîÑ Gerando testes de demonstra√ß√£o...")
        self._process_code_generation(demo_code, "demo_code")
    
    def show_system_configuration(self):
        """Mostra as configura√ß√µes atuais do sistema."""
        print("\n" + "=" * 60)
        print("‚öôÔ∏è CONFIGURA√á√ïES DO SISTEMA")
        print("=" * 60)
        
        print(self.config) # Usa o __str__ do ConfigManager
        
        if self.config.simulate_llm:
            print("\nüîß Para ativar Azure OpenAI, configure as vari√°veis de ambiente no seu arquivo .env:")
            print("  - AZURE_OPENAI_API_KEY=sua_chave_api")
            print("  - AZURE_OPENAI_ENDPOINT=https://seu-recurso.openai.azure.com/")
            print("  - AZURE_OPENAI_API_VERSION=2024-02-01 (ou a vers√£o que voc√™ usa)")
            print("  - AZURE_OPENAI_DEPLOYMENT_NAME=nome_do_seu_deployment")
    
    def show_statistics(self):
        """Mostra estat√≠sticas de uso da sess√£o atual."""
        print("\n" + "=" * 60)
        print("üìä ESTAT√çSTICAS DA SESS√ÉO")
        print("=" * 60)
        
        runtime = datetime.now() - self.statistics['start_time']
        success_rate = 0
        if self.statistics['total_generations'] > 0:
            success_rate = (self.statistics['successful_generations'] / 
                          self.statistics['total_generations']) * 100
        
        print(f"\nüìà ESTAT√çSTICAS GERAIS:")
        print(f"   Tempo total de sess√£o: {str(runtime).split('.')[0]}")
        print(f"   Total de gera√ß√µes tentadas: {self.statistics['total_generations']}")
        print(f"   Gera√ß√µes bem-sucedidas: {self.statistics['successful_generations']}")
        print(f"   Gera√ß√µes falharam: {self.statistics['failed_generations']}")
        print(f"   Taxa de sucesso: {success_rate:.1f}%")
    
    def show_help(self):
        """Exibe informa√ß√µes de ajuda e uso do sistema."""
        print("\n" + "=" * 60)
        print("‚ùì AJUDA E DOCUMENTA√á√ÉO")
        print("=" * 60)
        
        help_text = """
COMO USAR O SISTEMA:

1. üìù GERAR TESTES INTERATIVAMENTE:
   - Cole seu c√≥digo Python diretamente no terminal.
   - Digite 'END' em uma nova linha para finalizar a entrada.
   - O sistema analisar√° e gerar√° testes automaticamente.

2. üìÅ PROCESSAR ARQUIVOS:
   - Escolha entre processar um √∫nico arquivo Python ou todos os arquivos .py em um diret√≥rio.
   - Os testes gerados ser√£o salvos automaticamente no diret√≥rio de sa√≠da configurado.

3. üîç AN√ÅLISE DE C√ìDIGO:
   - Cole seu c√≥digo Python para obter uma an√°lise est√°tica detalhada (fun√ß√µes, classes, complexidade) sem gerar testes.

4. üß™ EXECUTAR EXEMPLO DE DEMONSTRA√á√ÉO:
   - Gera testes para um c√≥digo de exemplo pr√©-definido.

CONFIGURA√á√ÉO AZURE (opcional):
- Para usar o Azure OpenAI, configure as seguintes vari√°veis de ambiente no seu arquivo `.env`:
  - AZURE_OPENAI_API_KEY="sua_chave_api"
  - AZURE_OPENAI_ENDPOINT="https://seu-recurso.openai.azure.com/"
  - AZURE_OPENAI_API_VERSION="2024-02-01" (ou a vers√£o que voc√™ usa)
  - AZURE_OPENAI_DEPLOYMENT_NAME="nome_do_seu_deployment"

MODO SIMULA√á√ÉO:
- Se as vari√°veis do Azure n√£o estiverem configuradas, o sistema operar√° em "Modo Simula√ß√£o", gerando templates de teste b√°sicos.

DIRET√ìRIO DE SA√çDA:
- Os testes gerados s√£o salvos na pasta 'generated_tests/' por padr√£o. Voc√™ pode mudar isso na vari√°vel de ambiente OUTPUT_DIRECTORY.

SUPORTE:
- Desenvolvido por Edson Gomes (Bootcamp DIO + BairesDev Machine Learning)
- Adaptado e refatorado por Gemini.
        """
        
        print(help_text)
    
    def _display_generated_tests(self, test_code: str):
        """Exibe o c√≥digo dos testes gerados no console."""
        print(f"\nüß™ C√ìDIGO DOS TESTES GERADOS:")
        print("‚îÄ" * 60)
        
        if len(test_code) > 1500: # Limita a exibi√ß√£o para c√≥digos muito longos
            print(test_code[:1500])
            print(f"\n... (c√≥digo truncado - {len(test_code)} caracteres totais)")
            
            show_full = input("\nMostrar c√≥digo completo? (s/N): ").strip().lower()
            if show_full in ['s', 'sim', 'y', 'yes']:
                print(test_code)
        else:
            print(test_code)
        
        print("‚îÄ" * 60)
    
    def _display_code_analysis(self, analysis: Dict):
        """Exibe uma an√°lise detalhada do c√≥digo no console."""
        print(f"\nüîç AN√ÅLISE DETALHADA DO C√ìDIGO:")
        print("‚îÄ" * 50)
        
        stats = analysis.get('statistics', {})
        print(f"üìä Estat√≠sticas:")
        print(f"   Fun√ß√µes encontradas: {stats.get('total_functions', 0)}")
        print(f"   Classes encontradas: {stats.get('total_classes', 0)}")
        print(f"   Linhas de c√≥digo: {stats.get('total_lines', 0)}")
        print(f"   Complexidade ciclom√°tica: {stats.get('complexity', 0)}")
        
        functions = analysis.get('functions', [])
        if functions:
            print(f"\nüìã Fun√ß√µes ({len(functions)}):")
            for func in functions:
                params = ', '.join(func['parameters'])
                print(f"   ‚Ä¢ {func['name']}({params}) (linha {func['line']})")
        
        classes = analysis.get('classes', [])
        if classes:
            print(f"\nüì¶ Classes ({len(classes)}):")
            for cls in classes:
                print(f"   ‚Ä¢ {cls['name']} (linha {cls['line']})")
                if cls['methods']:
                    for method in cls['methods'][:3]:
                        print(f"      - {method}()")
                    if len(cls['methods']) > 3:
                        print(f"      ... e mais {len(cls['methods']) - 3} m√©todo(s)")
        
        imports = analysis.get('imports', [])
        if imports:
            print(f"\nüì• Imports ({len(imports)}):")
            for imp in imports[:5]:
                print(f"   ‚Ä¢ {imp}")
            if len(imports) > 5:
                print(f"   ... e mais {len(imports) - 5} import(s)")
    
    def _offer_save_tests(self, test_code: str, base_filename: Optional[str] = None):
        """Oferece ao usu√°rio a op√ß√£o de salvar os testes gerados em um arquivo."""
        save = input("\nüíæ Deseja salvar os testes em arquivo? (S/n): ").strip().lower()
        if save not in ['n', 'no', 'n√£o']:
            if base_filename:
                filename = f"test_{base_filename}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
            else:
                filename = f"test_generated_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
            
            try:
                test_dir = Path(self.config.output_directory)
                test_dir.mkdir(parents=True, exist_ok=True) # Garante que o diret√≥rio exista
                
                file_path = test_dir / filename
                file_path.write_text(test_code, encoding='utf-8')
                print(f"‚úÖ Testes salvos em: {file_path}")
                    
            except Exception as e:
                logger.error(f"Erro ao salvar arquivo {file_path}: {e}", exc_info=True)
                print(f"‚ùå Erro ao salvar arquivo: {e}")
    
    def _safe_exit(self):
        """Realiza um encerramento seguro do programa, exibindo estat√≠sticas finais."""
        print("\nüëã Finalizando sistema...")
        
        if self.statistics['total_generations'] > 0:
            runtime = datetime.now() - self.statistics['start_time']
            success_rate = (self.statistics['successful_generations'] / 
                          self.statistics['total_generations']) * 100
            
            print(f"üìä Estat√≠sticas da sess√£o:")
            print(f"   Tempo total: {str(runtime).split('.')[0]}")
            print(f"   Gera√ß√µes tentadas: {self.statistics['total_generations']}")
            print(f"   Gera√ß√µes bem-sucedidas: {self.statistics['successful_generations']}")
            print(f"   Gera√ß√µes falharam: {self.statistics['failed_generations']}")
            print(f"   Taxa de sucesso: {success_rate:.1f}%")
        
        print("‚úÖ Sistema finalizado com sucesso.")


def create_argument_parser():
    """Cria e configura o parser de argumentos de linha de comando."""
    parser = argparse.ArgumentParser(
        description='Sistema de Gera√ß√£o de Testes Unit√°rios com LangChain e Azure ChatGPT',
        epilog='Desenvolvido por Edson Gomes - Bootcamp DIO + BairesDev (Adaptado por Gemini)'
    )
    
    parser.add_argument(
        '--file', '-f',
        type=str,
        help='Caminho para um arquivo Python (.py) para gerar testes.'
    )
    
    parser.add_argument(
        '--directory', '-d',
        type=str,
        help='Caminho para um diret√≥rio contendo arquivos Python para processar em lote.'
    )
    
    parser.add_argument(
        '--version', '-v',
        action='version',
        version='Sistema de Gera√ß√£o de Testes v1.0.0'
    )
    
    return parser


def process_command_line_args(args):
    """
    Processa os argumentos de linha de comando e executa a a√ß√£o apropriada.
    """
    cli = TestGeneratorCLI()
    
    if args.file:
        logger.info(f"Processando arquivo via CLI: {args.file}")
        cli._process_single_file_from_cli(args.file) # Chama o m√©todo auxiliar
    
    elif args.directory:
        logger.info(f"Processando diret√≥rio via CLI: {args.directory}")
        cli._process_directory_from_cli(args.directory) # Chama o m√©todo auxiliar
    
    else:
        # Se nenhum argumento espec√≠fico for fornecido, executa o modo interativo
        cli.run()
    
    return 0

# M√©todos auxiliares para CLI (para serem chamados por process_command_line_args)
# Estes s√£o wrappers para os m√©todos existentes na classe CLI
def _process_single_file_from_cli(self, file_path_str: str):
    file_path = Path(file_path_str)
    if file_path.exists() and file_path.suffix == '.py':
        source_code = file_path.read_text(encoding='utf-8')
        print(f"‚úÖ Arquivo carregado: {file_path.name}")
        self._process_code_generation(source_code, file_path.stem)
    else:
        print(f"‚ùå Arquivo n√£o encontrado ou inv√°lido: {file_path_str}")

def _process_directory_from_cli(self, dir_path_str: str):
    dir_path = Path(dir_path_str)
    if dir_path.exists() and dir_path.is_dir():
        py_files = list(dir_path.glob("**/*.py"))
        if py_files:
            print(f"üìÑ Encontrados {len(py_files)} arquivo(s) Python:")
            for file_path in py_files:
                try:
                    source_code = file_path.read_text(encoding='utf-8')
                    print(f"\nüîÑ Processando {file_path.name}...")
                    self._process_code_generation(source_code, file_path.stem)
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erro ao ler ou processar {file_path.name}: {e}")
        else:
            print(f"‚ùå Nenhum arquivo Python encontrado em: {dir_path_str}")
    else:
        print(f"‚ùå Diret√≥rio n√£o encontrado: {dir_path_str}")


def main():
    """Fun√ß√£o principal do programa."""
    try:
        parser = create_argument_parser()
        args = parser.parse_args()
        
        # Injeta os m√©todos auxiliares na inst√¢ncia da CLI para acesso direto
        # Isso √© um pequeno hack para evitar passar a inst√¢ncia da CLI para as fun√ß√µes globais
        # ou refatorar process_command_line_args para ser um m√©todo da CLI.
        # Para um projeto maior, process_command_line_args seria um m√©todo da CLI.
        TestGeneratorCLI._process_single_file_from_cli = _process_single_file_from_cli
        TestGeneratorCLI._process_directory_from_cli = _process_directory_from_cli

        exit_code = process_command_line_args(args)
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        logger.error(f"Erro fatal: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
